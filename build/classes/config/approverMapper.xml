<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="approverMapper">

	<!-- 결재처리 1-8 -->
	<!-- 1. 현재 결재자 승인 처리 -->
	<update id="processApproval" parameterType="com.oopsw.model.VO.ApprovalLineVO">
		update approval_line
		set approval_status = #{approvalStatus}, opinion = #{opinion}, approval_date = sysdate
		where document_no = #{documentNo} and approver_id = #{approverId}
	</update>

	<!-- 2. 다음 결재자 상태를 '결재대기'로 변경 -->
	<update id="setNextApproverToWait" parameterType="com.oopsw.model.VO.ApprovalLineVO">
		update approval_line
		set approval_status = '결재대기'
		where document_no = #{documentNo} and line_order = #{lineOrder} + 1 and approval_status = '대기중'
	</update>

	<!-- 3. 다음 결재자 line_no 조회 -->
	<select id="findNextApprovalLineNo" parameterType="com.oopsw.model.VO.ApprovalLineVO" resultType="Integer">
		select approval_line_no
		from approval_line
		where document_no = #{documentNo} and line_order = #{lineOrder} + 1
	</select>

	<!-- 4. 다음 결재자 알림 (approval_request_noti) -->
	<insert id="sendRequestNoti" parameterType="com.oopsw.model.VO.ApprovalLineVO">
		insert into approval_request_noti (request_noti_no, approval_line_no, noti_in_date, request_read_status)
		values (request_noti_no_seq.nextval, #{approvalLineNo}, sysdate, null)
	</insert>

	<!-- 5. 마지막 결재자일 경우, 결재처리알림 insert -->
	<insert id="sendProcessNoti" parameterType="com.oopsw.model.VO.ApprovalLineVO">
		insert into approval_process_noti (process_noti_no, document_no, process_read_status)
		values (process_noti_no_seq.nextval, #{documentNo}, null)
	</insert>


	<!-- 6. 문서상태변경, 반려 -->
	<update id="setDocReject" parameterType="com.oopsw.model.VO.DocumentVO">
		update document
		set process_status = '반려', completion_date = sysdate
		where document_no = #{documentNo}
	</update>

	<!-- 7. 문서상태변경, 완료 (마지막 결재자 승인 시) -->
	<update id="setDocComplete" parameterType="com.oopsw.model.VO.DocumentVO">
		update document
		set process_status = '완료', completion_date = sysdate, approved_document_no = 'D' || to_char(sysdate, 'YY') || '-' || to_char(approved_document_no_seq.nextval)
		where document_no = #{documentNo}
	</update>

	<!-- 8. 부재 여부 확인 (대결자 정보 조회) -->
	<select id="checkAbsence" parameterType="string" resultType="com.oopsw.model.VO.AbsenceVO">
		select a.absence_date_no as absenceDateNo, a.absentee_id as absenteeId, a.proxy_id as proxyId, 
			a.absence_start_date as absenceStartDate, a.absence_end_date as absenceEndDate, a.absence_usage as absenceUsage
		from absence a
		where a.absentee_id = #{approverId} and a.absence_usage = '위임'
	</select>



	<!-- 결재 대기 목록 조회 -->
	<select id="getWaitList" parameterType="string" resultType="com.oopsw.model.VO.ApproverListVO">
		select d.document_no as documentNo, d.title as title, d.deadline as deadline, d.draft_date as draftDate,
				e1.name as name, e1.department as department, al.approval_status as approvalStatus
		from approval_line al
		join document d on al.document_no = d.document_no
		join employee e1 on d.employee_id = e1.employee_id
		where al.approver_id = #{approverId} and al.approval_status = '결재대기'
		order by d.deadline asc, d.draft_date desc
	</select>

	<!-- 결재 처리 목록 조회 (내가 반려한 문서 + 내가 승인한 완료 문서) -->
	<select id="getEndList" parameterType="string" resultType="com.oopsw.model.VO.ApproverListVO">
		select d.document_no as documentNo, d.approved_document_no as approvedDocumentNo, d.title as title, e1.department as department,
				d.draft_date as draftDate, d.process_status as processStatus, d.completion_date as completionDate
		from approval_line al
		join document d on al.document_no = d.document_no
		join employee e1 on d.employee_id = e1.employee_id
		where al.approver_id = #{approverId}
			and (
			al.approval_status = '반려' or (al.approval_status = '승인' and d.process_status = '완료')
			)
		order by al.approval_date desc, d.draft_date desc
	</select>


	<!-- === 부재 === -->
	<!-- 부재 목록 조회 -->
	<select id="getAbsenceList" resultType="com.oopsw.model.VO.AbsenceListVO">
		select a.absence_date_no as absenceDateNo, a.absence_start_date as absenceStartDate, a.absence_end_date as absenceEndDate,
				e.name as proxyName, e.rank as proxyRank, a.absence_reason as absenceReason, a.absence_usage as absenceUsage
		from absence a
		join employee e on a.proxy_id = e.employee_id
		where a.absentee_id = #{absenteeId}
		order by a.absence_start_date desc
	</select>

	<!-- 대결 목록 조회 -->
	<select id="getProxyList" resultType="com.oopsw.model.VO.AbsenceListVO">
		select a.absence_date_no as absenceDateNo, a.absence_start_date as absenceStartDate, a.absence_end_date as absenceEndDate,
				e.name as absenteeName, e.rank as absenteeRank, a.absence_reason as absenceReason
		from absence a
		join employee e on a.absentee_id = e.employee_id
		where a.proxy_id = #{proxyId}
		order by a.absence_start_date desc
	</select>

	<!-- 부재 추가 (+ 대결알림) -->
	<insert id="addAbsence" parameterType="com.oopsw.model.VO.AbsenceVO">
		insert into absence (absence_date_no, absentee_id, proxy_id, absence_start_date, absence_end_date, absence_reason,
			absence_usage, noti_in_date, absence_read_status)
		values (absence_date_no_seq.nextval, #{absenteeId}, #{proxyId}, #{absenceStartDate}, #{absenceEndDate}, #{absenceReason},
			#{absenceUsage}, sysdate, null)
	</insert>

	<!-- 위임 철회 (사용여부가 위임중일때만) -->
	<update id="endAbsence" parameterType="int">
		update absence
		set absence_end_date = trunc(sysdate), absence_usage = '종료'
		where absence_date_no = #{absenceDateNo} and absence_usage = '위임'
	</update>

	<!-- 부재 수정 -->
	<update id="modifyAbsence" parameterType="com.oopsw.model.VO.AbsenceVO">
		update absence
		set proxy_id = #{proxyId}, absence_start_date = #{absenceStartDate}, absence_end_date = #{absenceEndDate}, absence_reason = #{absenceReason}, absence_usage = #{absenceUsage}
		where absence_date_no = #{absenceDateNo}
	</update>

	<!-- 부재 삭제 (사용여부가 대기중일때만) -->
	<delete id="deleteAbsence" parameterType="int">
		delete from absence where absence_date_no = #{absenceDateNo} and absence_usage = '대기'
	</delete>


	<!-- 알림 수신 목록 조회 (결재요청) -->
	<select id="getApprovalReqNoti" parameterType="string" resultType="com.oopsw.model.VO.AlarmVO">
		select
			an.request_noti_no as notiNo,
			d.document_no as documentNo,
			an.request_read_status as readStatus,
			an.noti_in_date as notiInDate,
			d.title as title,
			d.approved_document_no as approvedDocumentNo,
			a.approval_status as status
		from approval_request_noti an
		join approval_line a on an.approval_line_no = a.approval_line_no
		join document d on a.document_no = d.document_no
		where a.approver_id = #{approver_id} and a.approval_status = '결재대기'
		order by an.noti_in_date desc

	</select>
	
	<!-- 안읽은 결재요청 알림 조회 -->
	<select id="getUnReadApprovalReqNoti" parameterType="string" resultType="com.oopsw.model.VO.AlarmVO">
		select
			an.request_noti_no as notiNo,
			d.document_no as documentNo,
			an.request_read_status as readStatus,
			an.noti_in_date as notiInDate,
			d.title as title,
			d.approved_document_no as approvedDocumentNo,
			a.approval_status as status
		from approval_request_noti an
		join approval_line a on an.approval_line_no = a.approval_line_no
		join document d on a.document_no = d.document_no
		where a.approver_id = #{approver_id} and a.approval_status = '결재대기' and request_read_status is null
		order by an.noti_in_date desc

	</select>



</mapper>
